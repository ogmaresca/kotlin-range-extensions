TYPE=Short,UShort,Byte,UByte
/**
 * Map this [ClosedRange] of [T] to a [${TYPE}Range].
 * @see [Iterable.map]
 */
fun <T : Comparable<T>> ClosedRange<T>.mapTo${TYPE}Range(block: (T) -> ${TYPE}): ${TYPE}Range =
	(block(start)..block(endInclusive)).to${TYPE}Range()

/**
 * Map this [OpenEndRange] of [T] to a [${TYPE}Range].
 * @see [Iterable.map]
 */
fun <T : Comparable<T>> OpenEndRange<T>.mapTo${TYPE}OpenEndRangeRange(block: (T) -> ${TYPE}): ${TYPE}Range =
	(block(start)..<block(endExclusive)).to${TYPE}Range()
